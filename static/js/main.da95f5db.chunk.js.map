{"version":3,"sources":["App.js","index.js"],"names":["MyImage","props","className","alt","src","App","useState","markdown","setMarkdown","clicked","setClicked","darkMode","setDarkMode","renderers","image","useEffect","window","location","assign","Button","onClick","variant","color","placeholder","value","onChange","e","target","children","remarkPlugins","gfm","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAMMA,EAAU,SAAAC,GAEd,OACE,qBACEC,UAAWD,EAAMC,UACjBC,IAAKF,EAAME,IACXC,IAAKH,EAAMG,OA+CFC,MA1Cf,WAEE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAY,CAChBC,MAAOd,GAWT,OANAe,qBAAU,WACJN,GACFO,OAAOC,SAASC,OAAhB,kDAKF,sBAAKhB,UAAU,qBAAqB,aAAYS,EAAW,OAAS,QAApE,UACE,sBAAKT,UAAU,QAAf,UACE,iDACA,cAACiB,EAAA,EAAD,CAAQC,QAAS,kBAAMV,GAAW,IAAOW,QAAQ,YAAYC,MAAM,UAAnE,kBACA,cAACH,EAAA,EAAD,CAAQC,QAbS,kBAAMR,GAAYD,IAaFU,QAAQ,YAAzC,SAAuDV,EAAW,uBAAyB,wBAC3F,cAACQ,EAAA,EAAD,CAAQC,QAAS,kBAAMZ,EAAY,KAAKa,QAAQ,YAAYC,MAAM,YAAlE,sBAEF,0BACEC,YAAY,6BACZC,MAAOjB,EACPkB,SAAY,SAAAC,GAAC,OAAIlB,EAAYkB,EAAEC,OAAOH,UAExC,qBAAKtB,UAAU,mBAAf,SACE,cAAC,IAAD,CACE0B,SAAUrB,EACVsB,cAAe,CAACC,KAChBjB,UAAWA,UChDrBkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.da95f5db.chunk.js","sourcesContent":["import React , { useState, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown'; \nimport gfm from 'remark-gfm';\nimport Button from '@material-ui/core/Button';\nimport './App.css';\n\nconst MyImage = props => {\n\n  return (\n    <img\n      className={props.className}\n      alt={props.alt}\n      src={props.src}\n    />\n  );\n};\n\nfunction App() {\n\n  const [markdown, setMarkdown] = useState('');\n  const [clicked, setClicked] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n\n  const renderers = {\n    image: MyImage\n  };\n\n  const toggleDarkMode = () => setDarkMode(darkMode ? false : true);\n\n  useEffect(() => {\n    if (clicked) {\n      window.location.assign(`https://www.markdownguide.org/basic-syntax/`);\n    }\n  });\n\n  return (\n    <div className=\"markdown_container\" data-theme={darkMode ? \"dark\" : \"light\"}>\n      <div className=\"title\">\n        <h2>Markdown Editor</h2>\n        <Button onClick={() => setClicked(true)} variant=\"contained\" color=\"primary\">Info</Button>\n        <Button onClick={toggleDarkMode} variant=\"contained\" >{darkMode ? \"Switch to Light Mode\" : \"Switch to Dark Mode\"}</Button>\n        <Button onClick={() => setMarkdown('')} variant=\"contained\" color=\"secondary\">Clear</Button>\n      </div>\n      <textarea \n        placeholder=\"Enter the markdown text...\"\n        value={markdown}\n        onChange = {e => setMarkdown(e.target.value)} \n      />\n      <div className=\"markdown_preview\">\n        <ReactMarkdown \n          children={markdown} \n          remarkPlugins={[gfm]}\n          renderers={renderers}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}